),
Longitude = c(
139.6917, 2.3522, -9.139, -74.006, -46.6333,
55.297, 2.1734, 126.978, -74.0721, -2.2426,
108.9398, 39.5994, 100.2496, 22.9444, -101.2996,
-71.0657, 17.1077, 24.1052, 14.5146, 69.5914
)
)
# Function to fetch AQI for a single city
get_aqi <- function(latitude, longitude) {
# Construct the API URL
api_url <- sprintf(
"https://air-quality-api.open-meteo.com/v1/air-quality?latitude=%f&longitude=%f&current=us_aqi",
latitude, longitude
)
# Make the API request
response <- GET(api_url)
# Parse the response and extract AQI
if (http_type(response) == "application/json") {
air_quality_data <- content(response, as = "parsed", simplifyDataFrame = TRUE)
return(air_quality_data$current$us_aqi)
} else {
return(NA)  # Return NA if API call fails
}
}
# Apply the function to all cities and add the AQI to the tibble
city_aqi_data <- cities %>%
mutate(AQI = map2_dbl(Latitude, Longitude, get_aqi))
city_aqi_data <- city_aqi_data %>%
select(city_name, AQI)
# Print the final tibble
print(city_aqi_data)
library(rvest)
library(tibble)
# Define the list of city names (you only need to modify this line to add more cities)
cities <- c("Tokyo", "Paris", "Lisbon", "New_York_City", "São_Paulo", "Dubai", "Barcelona", "Seoul",
"Bogotá", "Manchester", "Xi%27an", "Medina", "Penang", "Thessaloniki", "North_Dakota",
"Bratislava", "Riga", "Skrova", "Shymkent")
# Define a named vector for cities and their corresponding XPath selectors for population density
city_xpaths <- c(
"Tokyo" = "//*[@id='mw-content-text']/div[1]/table[1]/tbody/tr[22]/td/text()[1]",
"Paris" = "//*[@id='mw-content-text']/div[1]/table[1]/tbody/tr[19]/td/text()[1]",
"Lisbon" = "//*[@id='mw-content-text']/div[1]/table[1]/tbody/tr[25]/td/text()[1]",
"New_York_City" = "//*[@id='mw-content-text']/div[1]/table[1]/tbody/tr[20]/td/text()[1]",
"São_Paulo" = "//*[@id='mw-content-text']/div[1]/table[1]/tbody/tr[24]/td/text()[1]",
"Dubai" = "//*[@id='mw-content-text']/div[1]/table[1]/tbody/tr[14]/td/text()[1]",
"Barcelona" = "//*[@id='mw-content-text']/div[1]/table[1]/tbody/tr[19]/td/text()[1]",
"Seoul" = "//*[@id='mw-content-text']/div[1]/table[1]/tbody/tr[26]/td/text()[1]",
"Bogotá" = "//*[@id='mw-content-text']/div[1]/table[1]/tbody/tr[18]/td/text()[1]",
"Manchester" = "//*[@id='mw-content-text']/div[1]/table[1]/tbody/tr[27]/td/text()[1]",
"Xi%27an" = "//*[@id='mw-content-text']/div[1]/table[1]/tbody/tr[20]/td/text()[1]",
"Medina" = "//*[@id='mw-content-text']/div[1]/table[1]/tbody/tr[20]/td/text()[1]",
"Penang" = "//*[@id='mw-content-text']/div[1]/table[1]/tbody/tr[32]/td/text()[1]",
"Thessaloniki" = "//*[@id='mw-content-text']/div[1]/table[1]/tbody/tr[21]/td/text()[1]",
"North_Dakota" = "//*[@id='mw-content-text']/div[1]/table[2]/tbody/tr[25]/td/text()[1]",
"Bratislava" = "//*[@id='mw-content-text']/div[1]/table[1]/tbody/tr[19]/td/text()[1]",
"Riga" = "//*[@id='mw-content-text']/div[1]/table[1]/tbody/tr[14]/td/text()[1]",
"Skrova" = "//*[@id='mw-content-text']/div[1]/table/tbody/tr[9]/td",
"Shymkent" = "//*[@id='mw-content-text']/div[1]/table[1]/tbody/tr[14]/td/text()[1]"
# Add more cities and their corresponding XPaths here as needed
)
# Base URL for the Wikipedia pages
base_url <- "https://en.wikipedia.org/wiki/"
# Initialize an empty tibble to store results
area_data <- tibble(city_name = character(), area = character())
# Loop through each city name, construct the URL, and extract the population density
for (city in cities) {
# Construct the full URL for each city
url <- paste0(base_url, city)
# Read the HTML content of the webpage
webpage <- tryCatch({
read_html(url)
}, error = function(e) {
message("Error reading ", city, " page: ", e$message)
return(NULL)
})
if (!is.null(webpage)) {
# Extract the population density value using the corresponding XPath for each city
area_xpath <- city_xpaths[city]  # Get the correct XPath for the city
area <- webpage %>%
html_nodes(xpath = area_xpath) %>%
html_text() %>%
trimws()  # Remove any leading or trailing whitespace
# If the population density is not found, set it as NA
if (length(area) > 0) {
area <- area[1]  # Take the first value if there are multiple
} else {
area <- NA
}
# Add the city and its population density to the tibble
area_data <- bind_rows(area_data, tibble(city_name = city, area = area))
}
}
# Replace underscores with spaces in city names
area_data$city_name <- gsub("_", " ", area_data$city_name)
# Print the final tibble
print(area_data)
# Merge the citybike_info with city_aqi_data based on the City column
merged_data <- left_join(citybike_info, city_aqi_data, by = "city_name")
# Rename
almost_data <- merged_data
# Print the final merged data
print(almost_data)
library(tidyr)
library(dplyr)
# Assuming 'primary_data' contains the long-format data
primary_data_wide <- primary_data %>%
group_by(city_name) %>%
summarise(
bike_stations = n(),  # Number of bike stations per city
free_bikes = sum(free_bikes, na.rm = TRUE),  # Sum of free bikes per city
network_name = unique(network_name),  # Assuming each city has one network
AQI = unique(AQI),
area = unique(area) # Assuming each city has one AQI value
) %>%
ungroup()
# Remove any non-numeric characters (like commas, text)
primary_data_wide$area <- gsub(",", "", primary_data_wide$area)  # Remove commas
primary_data_wide$area <- gsub("[^0-9.]", "", primary_data_wide$area)  # Remove any non-numeric characters
# Convert the 'area' column to numeric first
primary_data_wide$area <- as.numeric(primary_data_wide$area)
# Now convert to integer
primary_data_wide$area <- as.integer(primary_data_wide$area)
# Print the updated dataset
print(primary_data_wide)
library(dplyr)
# Assuming primary_data is your dataframe that contains the AQI column
primary_data_wide <- primary_data_wide %>%
mutate(
air_quality = case_when(
AQI <= 50 ~ "Good",
AQI > 50 & AQI <= 100 ~ "Moderate",
AQI > 100 & AQI <= 150 ~ "Unhealthy for sensitive groups",
AQI > 150 & AQI <= 200 ~ "Unhealthy",
AQI > 200 & AQI <= 300 ~ "Very unhealthy",
AQI > 300 ~ "Hazardous",
TRUE ~ "Unknown"  # Handle any unexpected AQI values
)
)
# View the updated dataframe with the new air_quality column
print(primary_data_wide)
library(dplyr)
# Convert area from square kilometers to square miles
primary_data_wide$area_miles <- primary_data_wide$area * 0.3861
# Now calculate stations per square mile
primary_data_wide$stations_per_sqmi <- round(primary_data_wide$bike_stations / primary_data_wide$area_miles)
print(primary_data_wide)
# Classify cities based on bike station availability
high_threshold <- median(primary_data_wide$bike_stations, na.rm = TRUE)
primary_data_wide$bike_station_category <- ifelse(primary_data_wide$bike_stations > high_threshold,
"High Availability",
"Low Availability")
# Print the updated dataset
print(primary_data_wide)
ggplot(primary_data_wide, aes(x = AQI, y = bike_stations, color = interaction_index)) +
geom_point(size = 3, alpha = 0.8) +
geom_smooth(method=lm)
# Assuming your dataset is named `df1`
# Columns in df1: 'city', 'AQI', 'bike_station_density'
# Step 1: Create the Interaction Index
primary_data_wide$interaction_index <- round(primary_data_wide$bike_stations / primary_data_wide$AQI)
# Step 2: Handle potential division-by-zero or NA issues
primary_data_wide$interaction_index[is.infinite(primary_data_wide$interaction_index)] <- NA  # Replace Inf with NA
primary_data_wide$interaction_index[is.na(primary_data_wide$interaction_index)] <- 0        # Replace NA with 0
# Step 3: View the updated dataset
print(primary_data_wide)
ggplot(primary_data_wide, aes(x = AQI, y = bike_stations, color = interaction_index)) +
geom_point(size = 3, alpha = 0.8) +
geom_smooth(method=lm)
scale_color_gradient(low = "blue", high = "red", name = "Interaction Index") +
labs(
title = "Bike Stations vs. Air Quality",
x = "Air Quality Index (AQI)",
y = "Number of Bike Stations"
) +
theme_minimal()
ggplot(primary_data_wide, aes(x = AQI, y = bike_stations, color = interaction_index)) +
geom_point(size = 3, alpha = 0.8) +
geom_smooth(method = "lm") +  # Linear regression line
scale_color_gradient(low = "blue", high = "red", name = "Interaction Index") +  # Color scale for interaction index
labs(
title = "Bike Stations vs. Air Quality",
x = "Air Quality Index (AQI)",
y = "Number of Bike Stations"
) +
theme_minimal()
library(ggplot2)
# Filter out the row where city is "Medina"
primary_data_wide_filtered <- primary_data_wide %>%
filter(city != "Medina")
ggplot(primary_data_wide, aes(x = AQI)) +
geom_histogram(binwidth = 5, fill = "blue", color = "white", alpha = 0.7) +
labs(
title = "Distribution of Air Quality Index (AQI)",
x = "AQI",
y = "Frequency"
) +
theme_minimal()
# Filter out the row where city is "Medina"
primary_data_wide_filtered <- primary_data_wide %>%
filter(city != "Medina")
ggplot(primary_data_wide, aes(x = AQI, y = bike_stations, color = interaction_index)) +
geom_point(size = 3, alpha = 0.8) +
geom_smooth(method = "lm") +  # Linear regression line
scale_color_gradient(low = "blue", high = "red", name = "Interaction Index") +  # Color scale for interaction index
labs(
title = "Bike Stations vs. Air Quality",
x = "Air Quality Index (AQI)",
y = "Number of Bike Stations"
) +
theme_minimal()
# Filter out the row where city is "Medina"
primary_data_wide_filtered <- primary_data_wide %>%
filter(city != "Medina")
ggplot(primary_data_wide_filtered, aes(x = AQI, y = bike_stations, color = interaction_index)) +
geom_point(size = 3, alpha = 0.8) +
geom_smooth(method = "lm") +  # Linear regression line
scale_color_gradient(low = "blue", high = "red", name = "Interaction Index") +  # Color scale for interaction index
labs(
title = "Bike Stations vs. Air Quality",
x = "Air Quality Index (AQI)",
y = "Number of Bike Stations"
) +
theme_minimal()
primary_data_wide_filtered <- primary_data_wide %>%
filter(city != "Medina")
ggplot(primary_data_wide_filtered, aes(x = AQI, y = bike_stations, color = interaction_index)) +
geom_point(size = 3, alpha = 0.8) +
geom_smooth(method = "lm") +  # Linear regression line
scale_color_gradient(low = "blue", high = "red", name = "Interaction Index") +  # Color scale for interaction index
labs(
title = "Bike Stations vs. Air Quality",
x = "Air Quality Index (AQI)",
y = "Number of Bike Stations"
) +
theme_minimal()
# Filter out the row where city is "Medina"
primary_data_wide_filtered <- primary_data_wide %>%
filter(city_name != "Medina")
ggplot(primary_data_wide_filtered, aes(x = AQI, y = bike_stations, color = interaction_index)) +
geom_point(size = 3, alpha = 0.8) +
geom_smooth(method = "lm") +  # Linear regression line
scale_color_gradient(low = "blue", high = "red", name = "Interaction Index") +  # Color scale for interaction index
labs(
title = "Bike Stations vs. Air Quality",
x = "Air Quality Index (AQI)",
y = "Number of Bike Stations"
) +
theme_minimal()
# Filter out the row where city is "Medina"
ggplot(primary_data_wide, aes(x = AQI, y = bike_stations, color = interaction_index)) +
geom_point(size = 3, alpha = 0.8) +
geom_smooth(method = "lm") +  # Linear regression line
scale_color_gradient(low = "blue", high = "red", name = "Interaction Index") +  # Color scale for interaction index
labs(
title = "Bike Stations vs. Air Quality",
x = "Air Quality Index (AQI)",
y = "Number of Bike Stations"
) +
theme_minimal()
# Filter out the row where city is "Medina"
primary_data_wide_filtered <- primary_data_wide %>%
filter(city_name != "Medina")
ggplot(primary_data_wide_filtered, aes(x = AQI, y = bike_stations, color = interaction_index)) +
geom_point(size = 3, alpha = 0.8) +
geom_smooth(method = "lm") +  # Linear regression line
scale_color_gradient(low = "blue", high = "red", name = "Interaction Index") +  # Color scale for interaction index
labs(
title = "Bike Stations vs. Air Quality",
x = "Air Quality Index (AQI)",
y = "Number of Bike Stations"
) +
theme_minimal()
library(ggplot2)
ggplot(primary_data_wide, aes(x = AQI)) +
geom_histogram(binwidth = 5, fill = "skyblue", color = "white", alpha = 0.8, size = 0.2) +
labs(
title = "Distribution of Air Quality Index (AQI)",
x = "Air Quality Index (AQI)",
y = "Frequency"
) +
theme_minimal(base_size = 14) +
theme(
plot.title = element_text(size = 18, face = "bold", hjust = 0.5),
axis.title = element_text(size = 14, face = "bold"),
axis.text = element_text(size = 12)
)
library(ggplot2)
ggplot(primary_data_wide, aes(x = AQI)) +
geom_density(fill = "skyblue", alpha = 0.7) +
labs(
title = "Density Distribution of AQI",
x = "Air Quality Index (AQI)",
y = "Density"
) +
theme_minimal()
# Example primary_data_wide with 19 cities (replace AQI, latitude, and longitude with actual data)
# Load necessary packages
library(leaflet)
# Create a copy of the dataframe so the original 'primary_data_wide' is not altered
primary_data_wide_copy <- primary_data_wide
# Create the interactive map
leaflet(data = primary_data_wide_copy) %>%
addTiles() %>%  # Add default OpenStreetMap tiles
addCircles(
lat = ~latitude,
lng = ~longitude,
radius = ~AQI * 2,  # Adjust the radius based on AQI values (e.g., multiplied by 2 for visibility)
popup = ~paste(city_name, "<br> AQI:", AQI),
color = ~ifelse(AQI > 100, "red", ifelse(AQI > 50, "orange", "green")),  # Color by AQI
stroke = FALSE,
fillOpacity = 0.7
) %>%
addLegend("bottomright",
pal = colorNumeric(palette = "RdYlGn", domain = c(0, 200)),
values = primary_data_wide_copy$AQI,
title = "AQI",
opacity = 1)
View(primary_data_wide)
View(secondary_data)
# Load necessary packages
library(leaflet)
# Create a copy of the dataframe so the original 'primary_data_wide' is not altered
secondary_data_copy <- data.frame(
city_name = c("Xi'an", "Tokyo", "Seoul", "São_Paulo", "Riga", "Rieti", "Penang",
"Paris", "North_Dakota", "Nicosia", "New_York_City", "Medina",
"Manchester", "Lisbon", "Lima", "Inverness", "Dubai", "Bratislava",
"Bogotá", "Barcelona"),
pop_density = c(2000, 6363, 16000, 7819.86, 2000, 230, 1659.11, 20000,
4.13, 1700, 11313.8, 2012, 4920, 5445.7, 12000, 2000,
110000, 1297, 5061, 16000),  # Population density values per km²
latitude = c(34.3416, 35.6762, 37.5665, -23.5505, 56.9460, 42.4020, 5.4165,
48.8566, 47.5300, 35.1856, 40.7128, 24.4706, 53.4808, 38.7223,
-12.0464, 57.4770, 25.276987, 48.1482, 4.7110, 41.3851),  # Coordinates for the cities
longitude = c(108.9398, 139.6503, 126.9780, -46.6333, 24.1059, 12.8751, 100.3302,
2.3522, -97.5318, 17.1075, -74.0060, 39.6116, -2.2426, -9.1395,
-77.0356, -4.6110, 55.296249, 17.1075, -74.0721, 2.1734)  # Coordinates for the cities
)
# Create the interactive map
leaflet(data = secondary_data_copy) %>%
addTiles() %>%  # Add default OpenStreetMap tiles
addCircles(
lat = ~latitude,
lng = ~longitude,
radius = ~pop_density * 2,  # Adjust the radius based on population density values (multiplied by 2 for visibility)
popup = ~paste(city_name, "<br> Population Density:", pop_density, "per km²"),  # Updated popup to reflect pop_density
color = ~ifelse(pop_density > 5000, "red", ifelse(pop_density > 1000, "orange", "green")),  # Color by population density
stroke = FALSE,
fillOpacity = 0.7
) %>%
addLegend("bottomright",
pal = colorNumeric(palette = "RdYlGn", domain = c(0, 120000)),
values = primary_data_wide_copy$pop_density,
title = "Pop Density (per km²)",
opacity = 1)
# Load necessary packages
library(leaflet)
# Create a copy of the dataframe so the original 'primary_data_wide' is not altered
secondary_data_copy <- data.frame(
city_name = c("Xi'an", "Tokyo", "Seoul", "São_Paulo", "Riga", "Rieti", "Penang",
"Paris", "North_Dakota", "Nicosia", "New_York_City", "Medina",
"Manchester", "Lisbon", "Lima", "Inverness", "Dubai", "Bratislava",
"Bogotá", "Barcelona"),
pop_density = c(2000, 6363, 16000, 7819.86, 2000, 230, 1659.11, 20000,
4.13, 1700, 11313.8, 2012, 4920, 5445.7, 12000, 2000,
110000, 1297, 5061, 16000),  # Population density values per km²
latitude = c(34.3416, 35.6762, 37.5665, -23.5505, 56.9460, 42.4020, 5.4165,
48.8566, 47.5300, 35.1856, 40.7128, 24.4706, 53.4808, 38.7223,
-12.0464, 57.4770, 25.276987, 48.1482, 4.7110, 41.3851),  # Coordinates for the cities
longitude = c(108.9398, 139.6503, 126.9780, -46.6333, 24.1059, 12.8751, 100.3302,
2.3522, -97.5318, 17.1075, -74.0060, 39.6116, -2.2426, -9.1395,
-77.0356, -4.6110, 55.296249, 17.1075, -74.0721, 2.1734)  # Coordinates for the cities
)
# Convert pop_density to numeric by removing non-numeric characters
secondary_data_copy$pop_density <- as.numeric(gsub("[^0-9.]", "", secondary_data_copy$pop_density))
# Create the interactive map
leaflet(data = secondary_data_copy) %>%
addTiles() %>%  # Add default OpenStreetMap tiles
addCircles(
lat = ~latitude,
lng = ~longitude,
radius = ~pop_density * 2,  # Adjust the radius based on population density values (multiplied by 2 for visibility)
popup = ~paste(city_name, "<br> Population Density:", pop_density, "per km²"),  # Updated popup to reflect pop_density
color = ~ifelse(pop_density > 5000, "red", ifelse(pop_density > 1000, "orange", "green")),  # Color by population density
stroke = FALSE,
fillOpacity = 0.7
) %>%
addLegend("bottomright",
pal = colorNumeric(palette = "RdYlGn", domain = c(0, 120000)),
values = primary_data_wide_copy$pop_density,
title = "Pop Density (per km²)",
opacity = 1)
# Load necessary packages
library(leaflet)
# Create a copy of the dataframe so the original 'primary_data_wide' is not altered
secondary_data_copy <- data.frame(
city_name = c("Xi'an", "Tokyo", "Seoul", "São_Paulo", "Riga", "Rieti", "Penang",
"Paris", "North_Dakota", "Nicosia", "New_York_City", "Medina",
"Manchester", "Lisbon", "Lima", "Inverness", "Dubai", "Bratislava",
"Bogotá", "Barcelona"),
pop_density = c(2000, 6363, 16000, 7819.86, 2000, 230, 1659.11, 20000,
4.13, 1700, 11313.8, 2012, 4920, 5445.7, 12000, 2000,
110000, 1297, 5061, 16000),  # Population density values per km²
latitude = c(34.3416, 35.6762, 37.5665, -23.5505, 56.9460, 42.4020, 5.4165,
48.8566, 47.5300, 35.1856, 40.7128, 24.4706, 53.4808, 38.7223,
-12.0464, 57.4770, 25.276987, 48.1482, 4.7110, 41.3851),  # Coordinates for the cities
longitude = c(108.9398, 139.6503, 126.9780, -46.6333, 24.1059, 12.8751, 100.3302,
2.3522, -97.5318, 17.1075, -74.0060, 39.6116, -2.2426, -9.1395,
-77.0356, -4.6110, 55.296249, 17.1075, -74.0721, 2.1734)  # Coordinates for the cities
)
# Convert pop_density to numeric by removing non-numeric characters
secondary_data_copy$pop_density <- as.numeric(gsub("[^0-9.]", "", secondary_data_copy$pop_density))
# Check if there are any NA values in pop_density after conversion
if (any(is.na(secondary_data_copy$pop_density))) {
warning("There are NA values in the pop_density column.")
}
# Handle missing values by replacing them with 0 (or any appropriate value)
secondary_data_copy$pop_density[is.na(secondary_data_copy$pop_density)] <- 0
# Create the interactive map
leaflet(data = secondary_data_copy) %>%
addTiles() %>%  # Add default OpenStreetMap tiles
addCircles(
lat = ~latitude,
lng = ~longitude,
radius = ~pop_density * 2,  # Adjust the radius based on population density values (multiplied by 2 for visibility)
popup = ~paste(city_name, "<br> Population Density:", pop_density, "per km²"),  # Updated popup to reflect pop_density
color = ~ifelse(pop_density > 5000, "red", ifelse(pop_density > 1000, "orange", "green")),  # Color by population density
stroke = FALSE,
fillOpacity = 0.7
) %>%
addLegend("bottomright",
pal = colorNumeric(palette = "RdYlGn", domain = c(0, 120000)),
values = primary_data_wide_copy$pop_density,
title = "Pop Density (per km²)",
opacity = 1)
# Load necessary packages
library(leaflet)
library(dplyr)
library(tidyr)
# City data with population density (values are just for example purposes)
cities <- data.frame(
city_name = c("Xi'an", "Tokyo", "Seoul", "São_Paulo", "Riga", "Rieti", "Penang",
"Paris", "North_Dakota", "Nicosia", "New_York_City", "Medina",
"Manchester", "Lisbon", "Lima", "Inverness", "Dubai", "Bratislava",
"Bogotá", "Barcelona"),
latitude = c(34.3416, 35.6762, 37.5665, -23.5505, 56.9460, 42.4020, 5.4165,
48.8566, 47.5300, 35.1856, 40.7128, 24.4706, 53.4808, 38.7223,
-12.0464, 57.4770, 25.276987, 48.1482, 4.7110, 41.3851),  # Coordinates
longitude = c(108.9398, 139.6503, 126.9780, -46.6333, 24.1059, 12.8751, 100.3302,
2.3522, -97.5318, 17.1075, -74.0060, 39.6116, -2.2426, -9.1395,
-77.0356, -4.6110, 55.296249, 17.1075, -74.0721, 2.1734),  # Coordinates
population_density = c(2000, 6363, 16000, 7819.86, 2000, 230, 1659.11, 20000, 4.13,
1700, 11313.8, 2012, 4920, 5445.7, 12000, 2000, 110000, 1297,
5061, 16000)  # Population density (people per km²)
)
# Create the interactive map
leaflet(data = cities) %>%
addTiles() %>%  # Add default OpenStreetMap tiles
addCircles(
lat = ~latitude,
lng = ~longitude,
radius = ~population_density * 2,  # Adjust the radius based on population density (scaled for visibility)
popup = ~paste(city_name, "<br> Population Density:", population_density, "people/km²"),
color = ~ifelse(pop_density > 10000, "red", ifelse(pop_density > 5000, "orange", "green")),  # Color by population density
stroke = FALSE,
fillOpacity = 0.7
) %>%
addLegend("bottomright",
pal = colorNumeric(palette = "RdYlGn", domain = c(0, 120000)),
values = cities$pop_density,
title = "Population Density (people/km²)",
opacity = 1)
# Load necessary packages
library(leaflet)
library(dplyr)
# City data with population density (values are just for example purposes)
cities <- data.frame(
city_name = c("Xi'an", "Tokyo", "Seoul", "São_Paulo", "Riga", "Rieti", "Penang",
"Paris", "North_Dakota", "Nicosia", "New_York_City", "Medina",
"Manchester", "Lisbon", "Lima", "Inverness", "Dubai", "Bratislava",
"Bogotá", "Barcelona"),
latitude = c(34.3416, 35.6762, 37.5665, -23.5505, 56.9460, 42.4020, 5.4165,
48.8566, 47.5300, 35.1856, 40.7128, 24.4706, 53.4808, 38.7223,
-12.0464, 57.4770, 25.276987, 48.1482, 4.7110, 41.3851),  # Coordinates
longitude = c(108.9398, 139.6503, 126.9780, -46.6333, 24.1059, 12.8751, 100.3302,
2.3522, -97.5318, 17.1075, -74.0060, 39.6116, -2.2426, -9.1395,
-77.0356, -4.6110, 55.296249, 17.1075, -74.0721, 2.1734),  # Coordinates
pop_density = c("2000", "6363", "16000", "7819.86", "2000", "230", "1659.11",
"20000", "4.13", "1700", "11313.8", "2012", "4920", "5445.7",
"12000", "2000", "110000", "1297", "5061", "16000")  # Population density (as strings)
)
# Convert pop_density to numeric (removing any non-numeric characters)
cities$pop_density <- as.numeric(gsub("[^0-9.]", "", cities$pop_density))
# Check for missing values in the pop_density column and filter them out
cities <- cities %>% filter(!is.na(pop_density))
# Create the interactive dot map
leaflet(data = cities) %>%
addTiles() %>%  # Add default OpenStreetMap tiles
addCircleMarkers(
lat = ~latitude,
lng = ~longitude,
radius = ~sqrt(pop_density) * 0.1,  # Adjust the size of the dots based on population density (scaled)
popup = ~paste(city_name, "<br> Population Density:", pop_density, "people/km²"),
color = ~ifelse(pop_density > 10000, "red", ifelse(pop_density > 5000, "orange", "green")),  # Color by population density
stroke = FALSE,
fillOpacity = 0.7
) %>%
addLegend("bottomright",
pal = colorNumeric(palette = "RdYlGn", domain = c(0, max(cities$pop_density, na.rm = TRUE))),
values = cities$pop_density,
title = "Population Density (people/km²)",
opacity = 1)
